#include<bits/stdc++.h>
using namespace std;
class Graph
{
	public:
	int v;
	vector<list<int>>adj;
	Graph(int vertex)
	{
		v=vertex;
		adj.resize(v);
	}
void addEdge(int v,int w)
{
	adj[v].push_back(w);
}
void bfs(int s)
{
	vector<bool>visited;
	visited.resize(v,false);
	queue<int>q;
	visited[s]=true;
	q.push(s);
	while(!q.empty())
	{
		s=q.front();
		cout<<s<<" ";
		q.pop();
	for(auto adjacent:adj[s])
	{
		if(!visited[adjacent])
		{
			visited[adjacent]=true;
			q.push(adjacent);
		}
	}
	}
}
};
int main()
{
	Graph g(4);
	g.addEdge(0,1);
	g.addEdge(0,2);
	g.addEdge(1,2);
    g.addEdge(2,0);
	g.addEdge(2,3);
	g.addEdge(3,3);
	g.bfs(2);
	return 0;
}
