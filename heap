#include<iostream>
using namespace std;
class heap
{
    public:
    int arr[100];
    int size;
    heap()
    {
        arr[1]=-1;
        size=0;
    }
    void insert(int val)
    {
        size=size+1;
        int index=size;
        arr[index]=val;
        while(size>1)
        {
            int parent=index/2;
            if(arr[parent]<arr[index])
            {
                swap(arr[parent],arr[index]);
                index=parent;
            }
            else
            {
                return;
            }
        }
    }
    void print()
    {
        for(int i=1;i<=size;i++)
        {
            cout<<arr[i]<<" ";
        }
        cout<<endl;
    }
    void deleteNode()
    {
        if(size==0)
        {
            return;
        }
        arr[1]=arr[size];
        size--;
        int i=1;
        while(i<size)
        {
int leftIndex=2*i;
int rightIndex=(2*i)+1;
if(leftIndex<size&&arr[i]<arr[leftIndex])
{
    swap(arr[i],arr[leftIndex]);
    i=leftIndex;
}
else if(rightIndex<size&&arr[i]<arr[rightIndex])
{
    swap(arr[i],arr[rightIndex]);
    i=rightIndex;
}
else
{
    return;
}
        }
    }
    //heapify
void heapify(int arr[],int n,int i)
{
    int largest=i;
    int r=(2*i)+1;
    int l=2*i;
    if(r<=n&&arr[largest]<arr[r])
    {
        largest=r;
    }
    if(l<=n&&arr[largest]<arr[l])
    {
        largest=l;
    }
    if(largest!=i)
    {
        swap(arr[largest],arr[i]);
        heapify(arr,n,largest);
    }
}
void heapSort(int arr[],int n)
{
    int size=n;
    while(size>1)
    {
        swap(arr[1],arr[size]);
        size--;
        heapify(arr,n,1);
    }
}
};
int main()
{
 heap h;
 h.insert(34);
 h.insert(2);
 h.insert(4);
 h.insert(56);
 h.print();
 h.deleteNode();
 h.print();
 int arr[]={-1,50,55,53,52,54};
 int n=5;
 for(int i=n/2;i>0;i--)
 {
    h.heapify(arr,n,i);
 }
 for(int i=1;i<=n;i++)
 {
    cout<<arr[i]<<" ";
 }
 cout<<endl;
 h.heapSort(arr,n);
 for(int i=1;i<=n;i++)
 {
    cout<<arr[i]<<" ";
 }
 return 0;   
}
